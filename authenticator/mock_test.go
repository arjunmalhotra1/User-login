// Code generated by MockGen. DO NOT EDIT.
// Source: ./authenticator/authenticator.go

// Package authenticator is a generated GoMock package.
package authenticator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockdbAccessor is a mock of dbAccessor interface.
type MockdbAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockdbAccessorMockRecorder
}

// MockdbAccessorMockRecorder is the mock recorder for MockdbAccessor.
type MockdbAccessorMockRecorder struct {
	mock *MockdbAccessor
}

// NewMockdbAccessor creates a new mock instance.
func NewMockdbAccessor(ctrl *gomock.Controller) *MockdbAccessor {
	mock := &MockdbAccessor{ctrl: ctrl}
	mock.recorder = &MockdbAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbAccessor) EXPECT() *MockdbAccessorMockRecorder {
	return m.recorder
}

// DeleteCookie mocks base method.
func (m *MockdbAccessor) DeleteCookie(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCookie", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteCookie indicates an expected call of DeleteCookie.
func (mr *MockdbAccessorMockRecorder) DeleteCookie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCookie", reflect.TypeOf((*MockdbAccessor)(nil).DeleteCookie), arg0)
}

// GetCookie mocks base method.
func (m *MockdbAccessor) GetCookie(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookie", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookie indicates an expected call of GetCookie.
func (mr *MockdbAccessorMockRecorder) GetCookie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockdbAccessor)(nil).GetCookie), arg0)
}

// GetEncryptedPass mocks base method.
func (m *MockdbAccessor) GetEncryptedPass(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptedPass", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptedPass indicates an expected call of GetEncryptedPass.
func (mr *MockdbAccessorMockRecorder) GetEncryptedPass(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptedPass", reflect.TypeOf((*MockdbAccessor)(nil).GetEncryptedPass), arg0)
}

// InsertLoggedInUser mocks base method.
func (m *MockdbAccessor) InsertLoggedInUser(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLoggedInUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLoggedInUser indicates an expected call of InsertLoggedInUser.
func (mr *MockdbAccessorMockRecorder) InsertLoggedInUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLoggedInUser", reflect.TypeOf((*MockdbAccessor)(nil).InsertLoggedInUser), arg0, arg1)
}

// InsertSignedUpUser mocks base method.
func (m *MockdbAccessor) InsertSignedUpUser(arg0 User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSignedUpUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSignedUpUser indicates an expected call of InsertSignedUpUser.
func (mr *MockdbAccessorMockRecorder) InsertSignedUpUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSignedUpUser", reflect.TypeOf((*MockdbAccessor)(nil).InsertSignedUpUser), arg0)
}

// IsUserLoggedIn mocks base method.
func (m *MockdbAccessor) IsUserLoggedIn(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserLoggedIn", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsUserLoggedIn indicates an expected call of IsUserLoggedIn.
func (mr *MockdbAccessorMockRecorder) IsUserLoggedIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserLoggedIn", reflect.TypeOf((*MockdbAccessor)(nil).IsUserLoggedIn), arg0)
}

// IsUserSignedUp mocks base method.
func (m *MockdbAccessor) IsUserSignedUp(arg0 string) (error, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserSignedUp", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsUserSignedUp indicates an expected call of IsUserSignedUp.
func (mr *MockdbAccessorMockRecorder) IsUserSignedUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserSignedUp", reflect.TypeOf((*MockdbAccessor)(nil).IsUserSignedUp), arg0)
}
